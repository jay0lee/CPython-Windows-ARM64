name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x64, arm64]
        majorpython: ["3.9"]

    steps:
      - name: Set environment variables
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          switch ( $env:ARCH )
          {
            x86
              {
                $env:installerarch = 'Win32'
                $env:filearch = ''
                $env:embedarch = '-Win32'
              }
            x64
              {
                $env:installerarch = 'AMD64'
                $env:filearch = '-AMD64'
                $env:embedarch = '-AMD64'
              }
            arm64
              {
                $env:installerarch = 'ARM64'
                $env:filearch = '-ARM64'
                $env:embedarch = '-ARM64'
                $env:skipmsi = '--skip-msi'
                #$env:skipnuget = '--skip-nuget'
                #$env:skipzip = '--skip-zip'
              }
          }
          Add-Content -Path $env:GITHUB_ENV -Value "ARCH=${env:ARCH}"
          Add-Content -Path $env:GITHUB_ENV -Value "installerarch=${env:installerarch}"
          Add-Content -Path $env:GITHUB_ENV -Value "embedarch=${env:embedarch}"
          Add-Content -Path $env:GITHUB_ENV -Value "filearch=${env:filearch}"
          Add-Content -Path $env:GITHUB_ENV -Value "skipmsi=${env:skipmsi}"
          Add-Content -Path $env:GITHUB_ENV -Value "skipnuget=${env:skipnuget}"
          Add-Content -Path $env:GITHUB_ENV -Value "skipzip=${env:skipzip}"

      - name: Install required tools
        run: |
          python -V
          $env:PYTHON = (gcm python).Path
          $env:PIP = (gcm pip).Path
          echo "PYTHON:"
          Invoke-Expression "$env:PYTHON -V"
          Invoke-Expression "$env:PIP install --upgrade pip --user"
          Invoke-Expression "$env:PIP install --upgrade sphinx --user"
          Add-Content -Path $env:GITHUB_ENV -Value "PYTHON=${env:PYTHON}"
          Add-Content -Path $env:GITHUB_ENV -Value "PIP=${env:PIP}"
          $env:SPHINXBUILD = (gcm sphinx-build).Path
          echo "Sphinx Build location: $env:SPHINXBUILD"
          Invoke-Expression "$env:SPHINXBUILD --version"
          Add-Content -Path $env:GITHUB_ENV -Value "SPHINXBUILD=${env:SPHINXBUILD}"

      - name: Upgrade WIX to 3.14
        run: |
          Invoke-WebRequest -Uri https://wixtoolset.org/downloads/v3.14.0.4118/wix314.exe -OutFile wix314.exe
          dir
          # Out-Null forces PowerShell to wait till install finishes
          .\wix314.exe /install /quiet /norestart | Out-Null

      - name: Clone Python and determine version
        env:
          majorpython: ${{ matrix.majorpython }}
        run: |
          git clone https://github.com/jay0lee/cpython.git
          cd cpython
          git checkout $env:majorpython
          $env:pyver = Select-String -Path Include\patchlevel.h -Pattern 'PY_VERSION\s*"([0-9.]*)' | % {$_.matches.groups[1].Value}
          echo "Building Python version $env:pyver"
          Add-Content -Path $env:GITHUB_ENV -Value "pyver=${env:pyver}"

      - name: Get external Python dependencies
        run: |
          cd cpython
          PCBuild\get_externals.bat
          
      - name: Build installers
        continue-on-error: true
        run: |
          cd cpython
          Tools\msi\buildrelease.bat -$env:ARCH --out release --python-exe $env:PYTHON $env:skipmsi $env:skipnuget $env:skipzip
          echo "In release:"
          dir release\
          dir release\$env:installerarch\
          dir release\$env:installerarch\binaries\

      - name: upload exe artifacts
        uses: actions/upload-artifact@v2
        with:
          name: python-${{ env.pyver }}${{ env.filearch }}.exe
          path: |
            cpython/release/${{ env.installerarch }}/python-${{ env.pyver }}${{ env.filearch }}.exe

      - name: Zip binaries folder
        run: |
          cd cpython
          Compress-Archive -Path .\release\${{ env.installerarch }}\binaries\ -DestinationPath .\python-${{ env.pyver }}-binaries-${{ env.ARCH }}.zip

      - name: upload binaries zip
        uses: actions/upload-artifact@v2
        with:
          name: python-${{ env.pyver }}-binaries-${{ env.ARCH }}.zip
          path: |
            cpython/python-${{ env.pyver }}-binaries-${{ env.ARCH }}.zip

      - name: upload embed zip file
        uses: actions/upload-artifact@v2
        with:
          name: python-${{ env.pyver }}-embed${{ env.embedarch }}.zip
          path: |
            cpython/release/${{ env.installerarch }}/python-${{ env.pyver }}-embed${{ env.embedarch }}.zip
